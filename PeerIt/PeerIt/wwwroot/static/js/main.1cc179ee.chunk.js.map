{"version":3,"sources":["webix.js","containers/portal.js","widget/LoginForm.js","containers/Login.js","App.js","serviceWorker.js","index.js"],"names":["Webix","react_default","a","createElement","ref","data","ui","this","setValues","parse","setValue","destructor","props","setWebixData","select","window","webix","ReactDOM","findDOMNode","refs","root","componentWillUpdate","Component","Portal","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","protoUI","name","defaults","borderless","$init","config","$ready","push","render","app","$view","view","src_webix","type","id","rows","padding","responsive","cols","ready","getFirstId","scroll","width","template","columns","fillspace","minWidth","Login","alert","height","innerHeight","innerWidth","minHeight","margin","elements","labelAlign","labelPosition","label","validate","validateEvent","value","click","doLogin","maxWidth","App","currentUser","portal","containers_Login","className","renderLogin","renderPortal","Boolean","location","hostname","match","src_App_0","document","getElementById","navigator","serviceWorker","then","registration","unregister"],"mappings":"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","file":"static/js/main.1cc179ee.chunk.js","sourcesContent":["// example of custom component with Webix UI inside\r\n// this one is a static view, not linked to the React data store\r\n\r\nimport React, { Component } from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport 'webix/webix.js';\r\nimport 'webix/webix.css';\r\n\r\nclass Webix extends Component {\r\n  render() {\r\n    return (\r\n      <div ref=\"root\"></div>\r\n    );\r\n  }\r\n\r\n  setWebixData(data){\r\n    const ui = this.ui;\r\n    if (ui.setValues)\r\n      ui.setValues(data);\r\n    else if (ui.parse)\r\n      ui.parse(data)\r\n    else if (ui.setValue)\r\n      ui.setValue(data); \r\n  }\r\n\r\n  componentWillUnmount(){\r\n    this.ui.destructor();\r\n    this.ui = null;\r\n  }\r\n\r\n  componentWillUpdate(props){\r\n    if (props.data)\r\n      this.setWebixData(props.data);\r\n    if (props.select)\r\n      this.select(props.select);\r\n  }\r\n\r\n  componentDidMount(){\r\n  \tthis.ui = window.webix.ui(\r\n  \t  this.props.ui, \r\n  \t  ReactDOM.findDOMNode(this.refs.root)\r\n\t  );\r\n\r\n    this.componentWillUpdate(this.props);\r\n  }\r\n  \r\n}\r\n\r\nexport default Webix;\r\n","// example of custom component with Webix UI inside\r\n// this one is a static view, not linked to the React data store\r\n\r\nimport React, { Component } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Webix from '../webix';\r\nimport LoginForm from '../widget/LoginForm';\r\n \r\nclass Portal extends Component {\r\n\r\n  constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        data : null\r\n      };\r\n\r\n    window.webix.protoUI({\r\n      name:\"react\",\r\n      defaults:{\r\n        borderless:true\r\n      },\r\n      $init:function(config){\r\n        this.$ready.push(function(){    \r\n          ReactDOM.render(\r\n            this.config.app,\r\n            this.$view\r\n          );\r\n        });\r\n      }\r\n    }, window.webix.ui.view)\r\n  }\r\n\r\n  render(){\r\n    let data = null;\r\n    let ui = {type:\"space\", id:\"a1\", rows:[{\r\n                 type:\"space\", padding:0, responsive:\"a1\", cols:[\r\n                     { view:\"list\", data:[\"Users\", \"Reports\", \"Settings\"],\r\n                       ready:function(){ this.select(this.getFirstId()); },\r\n                       select:true, scroll:false, width:200 },\r\n                     { template:\"column 2\", width:200 },\r\n                     { view:\"datatable\", select:true, columns:[\r\n                        { id:\"title\", fillspace:1 }, { id:\"votes\"}\r\n                       ], data:\"data\",\r\n                       minWidth:300 }\r\n                 ]}]};\r\n     return(\r\n      <div>\r\n        <Webix ui={ui} data={data}/>\r\n      </div>\r\n               \r\n             \r\n      );\r\n  }\r\n}\r\n\r\n//const Portal = ({ data, save }) => (\r\n  \r\n//)\r\nexport default Portal;\r\n\r\n","// example of custom component with Webix UI inside\r\n// this one is a static view, not linked to the React data store\r\nimport { Component } from 'react';\r\nimport ReactDOM from 'react-dom';\r\n//import Webix from '../webix';\r\n\r\n class LoginForm extends Component {\r\n  constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        data : null\r\n      };\r\n    window.webix.protoUI({\r\n      name:\"react\",\r\n      defaults:{\r\n        borderless:true\r\n      },\r\n      $init:function(config){\r\n        this.$ready.push(function(){    \r\n          ReactDOM.render(\r\n            this.config.app,\r\n            this.$view\r\n          );\r\n        });\r\n      }\r\n    }, window.webix.ui.view)\r\n  }\r\n  \r\n  render(){\r\n      return {\r\n      view:\"form\", width:400, elements:[\r\n      \r\n        { view:\"text\", name:\"email\", label:\"Email\"},\r\n        { view:\"text\",type:\"password\", name:\"password\", label:\"Password\"},\r\n        { cols:[\r\n          {}, { view:\"button\", value:\"Save\", click:function(){\r\n             console.log(\"save\");\r\n          }}\r\n        ]}\r\n      ]\r\n    };\r\n  }\r\n}\r\n\r\n//const Portal = ({ data, save }) => (\r\n  \r\n//)\r\nexport default LoginForm;\r\n","// example of custom component with Webix UI inside\r\n// this one is a static view, not linked to the React data store\r\n\r\nimport React, { Component } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Webix from '../webix';\r\nimport LoginForm from '../widget/LoginForm';\r\n \r\nclass Login extends Component {\r\n\r\n  constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        data : null\r\n      };\r\n\r\n    window.webix.protoUI({\r\n      name:\"react\",\r\n      defaults:{\r\n        borderless:true\r\n      },\r\n      $init:function(config){\r\n        this.$ready.push(function(){    \r\n          ReactDOM.render(\r\n            this.config.app,\r\n            this.$view\r\n          );\r\n        });\r\n      }\r\n    }, window.webix.ui.view)\r\n  }\r\n  doLogin(){\r\n    alert(\"do login\");\r\n  }\r\n  render(){\r\n    let data = null;\r\n    let ui = {\r\n       type:\"space\",\r\n       id:\"a1\",\r\n       height: window.innerHeight,\r\n       width:  window.innerWidth,\r\n       minWidth:500,\r\n       minHeight:500,\r\n      rows:\r\n                [{\r\n                 type:\"space\", \r\n                 padding:50, \r\n                 responsive:\"a1\", \r\n                 margin:0,\r\n                \r\n                 cols:[\r\n                        { view:\"form\", \r\n                            elements:[\r\n                                { \r\n                                  type:\"header\",\r\n                                  template:\"Please Login\"\r\n                                },\r\n                                { \r\n                                  view:\"text\",\r\n                                  labelAlign:\"top\",\r\n                                  labelPosition:\"top\", \r\n                                  name:\"emailAddress\",\r\n                                  label:\"Email Address\",\r\n                                  validate:\"isNotEmpty\",\r\n                                  validateEvent:\"key\",\r\n                                  value:\"\" ,\r\n                                  \r\n                                },\r\n                                { \r\n                                  view:\"text\", \r\n                                  labelPosition:\"top\", \r\n                                  name:\"password\", \r\n                                  label:\"Password\",\r\n                                  validate:\"isNotEmpty\", \r\n                                  validateEvent:\"key\",\r\n                                  value:\"\" ,\r\n\r\n                                }, {}, { view:\"button\", label: 'login', click:this.doLogin }\r\n                          ]},\r\n\r\n                       ], \r\n                       maxWidth:600,\r\n                       minWidth:300 \r\n                     }\r\n                 ]};\r\n     return(\r\n      <div>\r\n        <Webix ui={ui} data={data}/>\r\n      </div>\r\n               \r\n             \r\n      );\r\n  }\r\n}\r\n\r\n//const Portal = ({ data, save }) => (\r\n  \r\n//)\r\nexport default Login;\r\n\r\n","import React, { Component } from 'react';\r\n//import logo from './logo.svg';\r\nimport './App.css';\r\nimport Portal from './containers/portal.js';\r\nimport Login from './containers/Login.js';\r\nclass App extends Component {\r\nconstructor(props) {\r\n    super(props);\r\n    this.state = {\r\n    \tcurrentUser : null\r\n    };\r\n    \r\n    // Remember to use this.setState({currentUser : something}); \r\n  }\r\n // / <Login  currentUser={this.state.currentUser}/>\r\n  renderPortal(){\r\n  \tif(this.state.currentUser != null){\r\n  \t\treturn <Portal currentUser={this.state.currentUser}/>\r\n  \t}\r\n  }\r\n  renderLogin(){\r\n  \tif(this.state.currentUser == null){\r\n  \t\treturn <Login currentUser={this.state.currentUser}/>\r\n  \t}\r\n  }\r\n  render() {\r\n   return (\r\n   <div className=\"appContainer\">\r\n      {this.renderLogin()}\r\n      {this.renderPortal()} \r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}