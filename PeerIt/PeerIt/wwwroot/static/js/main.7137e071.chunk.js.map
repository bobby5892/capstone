{"version":3,"sources":["webix.js","containers/portal.js","containers/Login.js","App.js","serviceWorker.js","index.js"],"names":["Webix","react_default","a","createElement","ref","data","ui","this","setValues","parse","setValue","destructor","props","setWebixData","select","window","webix","ReactDOM","findDOMNode","refs","root","componentWillUpdate","Component","Portal","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","protoUI","name","defaults","borderless","$init","config","$ready","push","render","app","$view","view","src_webix","type","id","rows","padding","responsive","cols","ready","getFirstId","scroll","width","template","columns","fillspace","minWidth","Login","console","log","baseUrl","updateLogin","handleLogin","$$","elements","passwordErrorLabel","_this2","userName","emailAddress","getValue","password","fetch","method","headers","Content-Type","credentials","then","res","json","response","JSON","stringify","success","role","errors","error","forEach","description","catch","height","innerHeight","innerWidth","minHeight","margin","labelAlign","labelPosition","label","validate","validateEvent","value","click","doLogin","bind","gravity","App","currentUser","assertThisInitialized","checkIfLoggedIn","portal","containers_Login","user","setState","className","renderLogin","renderPortal","Boolean","location","hostname","match","src_App_0","document","getElementById","navigator","serviceWorker","registration","unregister"],"mappings":"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","file":"static/js/main.7137e071.chunk.js","sourcesContent":["// example of custom component with Webix UI inside\r\n// this one is a static view, not linked to the React data store\r\n\r\nimport React, { Component } from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport 'webix/webix.js';\r\nimport 'webix/webix.css';\r\n\r\nclass Webix extends Component {\r\n  render() {\r\n    return (\r\n      <div ref=\"root\"></div>\r\n    );\r\n  }\r\n\r\n  setWebixData(data){\r\n    const ui = this.ui;\r\n    if (ui.setValues)\r\n      ui.setValues(data);\r\n    else if (ui.parse)\r\n      ui.parse(data)\r\n    else if (ui.setValue)\r\n      ui.setValue(data); \r\n  }\r\n\r\n  componentWillUnmount(){\r\n    this.ui.destructor();\r\n    this.ui = null;\r\n  }\r\n\r\n  componentWillUpdate(props){\r\n    if (props.data)\r\n      this.setWebixData(props.data);\r\n    if (props.select)\r\n      this.select(props.select);\r\n  }\r\n\r\n  componentDidMount(){\r\n  \tthis.ui = window.webix.ui(\r\n  \t  this.props.ui, \r\n  \t  ReactDOM.findDOMNode(this.refs.root)\r\n\t  );\r\n\r\n    this.componentWillUpdate(this.props);\r\n  }\r\n  \r\n}\r\n\r\nexport default Webix;\r\n","// example of custom component with Webix UI inside\r\n// this one is a static view, not linked to the React data store\r\n\r\nimport React, { Component } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Webix from '../webix';\r\n\r\n \r\nclass Portal extends Component {\r\n\r\n  constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        data : null\r\n      };\r\n\r\n    window.webix.protoUI({\r\n      name:\"react\",\r\n      defaults:{\r\n        borderless:true\r\n      },\r\n      $init:function(config){\r\n        this.$ready.push(function(){    \r\n          ReactDOM.render(\r\n            this.config.app,\r\n            this.$view\r\n          );\r\n        });\r\n      }\r\n    }, window.webix.ui.view)\r\n  }\r\n\r\n  render(){\r\n    let data = null;\r\n    let ui = {type:\"space\", id:\"a1\", rows:[{\r\n                 type:\"space\", padding:0, responsive:\"a1\", cols:[\r\n                     { view:\"list\", data:[\"Users\", \"Reports\", \"Settings\"],\r\n                       ready:function(){ this.select(this.getFirstId()); },\r\n                       select:true, scroll:false, width:200 },\r\n                     { template:\"column 2\", width:200 },\r\n                     { view:\"datatable\", select:true, columns:[\r\n                        { id:\"title\", fillspace:1 }, { id:\"votes\"}\r\n                       ], data:\"data\",\r\n                       minWidth:300 }\r\n                 ]}]};\r\n     return(\r\n      <div>\r\n        <Webix ui={ui} data={data}/>\r\n      </div>\r\n               \r\n             \r\n      );\r\n  }\r\n}\r\n\r\n//const Portal = ({ data, save }) => (\r\n  \r\n//)\r\nexport default Portal;\r\n\r\n","// example of custom component with Webix UI inside\r\n// this one is a static view, not linked to the React data store\r\n\r\nimport React, { Component } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Webix from '../webix';\r\n\r\n \r\nclass Login extends Component {\r\n\r\n  constructor(props) {\r\n      super(props);\r\n      console.log(props);\r\n      this.state = {\r\n        baseUrl : props.baseUrl,\r\n       \r\n        data : null,\r\n      };\r\n      //grab the update Login method\r\n      this.updateLogin = props.handleLogin;\r\n       console.log(this.state);\r\n\r\n    window.webix.protoUI({\r\n      name:\"react\",\r\n      defaults:{\r\n        borderless:true\r\n      },\r\n      $init:function(config){\r\n        this.$ready.push(function(){    \r\n          ReactDOM.render(\r\n            this.config.app,\r\n            this.$view\r\n          );\r\n        });\r\n      }\r\n    }, window.webix.ui.view)\r\n  }\r\n  clearError(){\r\n    console.log(\"clear error\");\r\n     window.webix.$$(\"loginForm\").elements.passwordErrorLabel.setValue(\"\");\r\n  }\r\n doLogin(){\r\n    let userName = window.webix.$$(\"loginForm\").elements.emailAddress.getValue();\r\n    let password = window.webix.$$(\"loginForm\").elements.password.getValue();\r\n    console.log(\"Username: \" + userName + \" Password: \" + password + \" baseUrl:\" + this.state);\r\n   \r\n    fetch(this.state.baseUrl+\"Account/Login?Email=\" + userName + \"&Password=\" + password + \"&returnUrl=\", {\r\n      method: 'POST', // or 'PUT'\r\n     // body: JSON.stringify({\"Email\":userName,\"Password\":password,\"returnUrl\":null}), // data can be `string` or {object}!\r\n      headers:{\r\n        'Content-Type': 'application/json'\r\n      },\r\n      credentials: \"same-origin\"\r\n    }).then(res => res.json())\r\n    .then(response => {\r\n      console.log('Success:', JSON.stringify(response))\r\n      if(response.success){\r\n        this.updateLogin(response.data[0].emailAddress,response.data[0].role);\r\n      }else{\r\n        let errors = \"\";\r\n        response.error.forEach( error => {\r\n          console.log(error);\r\n          errors += error.description\r\n        }); \r\n        window.webix.$$(\"loginForm\").elements.passwordErrorLabel.setValue(errors);\r\n      }\r\n\r\n    })\r\n    .catch(error => console.error('Error:', error));\r\n\r\n  }\r\n  render(){\r\n    let data = null;\r\n    let ui = {\r\n       type:\"space\",\r\n       id:\"a1\",\r\n       height: window.innerHeight-5,\r\n       width:  window.innerWidth-5,\r\n       minWidth:500,  \r\n       minHeight:500,\r\n      rows:\r\n                [{\r\n                 type:\"space\", \r\n                 padding:0, \r\n                 responsive:\"a1\", \r\n                 margin:0,\r\n                \r\n                 cols:[\r\n                        {},\r\n                        { \r\n                            view:\"form\", \r\n                            id:\"loginForm\",\r\n                            elements:[\r\n                                { \r\n                                  type:\"header\",\r\n                                  template:\"Please Login\"\r\n                                },\r\n                                { \r\n                                  view:\"text\",\r\n                                  labelAlign:\"top\",\r\n                                  labelPosition:\"top\", \r\n                                  name:\"emailAddress\",\r\n                                  label:\"Email Address\",\r\n                                  validate:\"isNotEmpty\",\r\n                                  validateEvent:\"key\",\r\n                                  value:\"\" \r\n                                },\r\n                                { \r\n                                  view:\"text\", \r\n                                  labelPosition:\"top\",\r\n                                  type:\"password\", \r\n                                  name:\"password\", \r\n                                  label:\"Password\",\r\n                                  validate:\"isNotEmpty\", \r\n                                  validateEvent:\"key\",\r\n                                  value:\"\" \r\n                                },\r\n                                { \r\n                                  view:\"label\", \r\n                                  name:\"passwordErrorLabel\", \r\n                                  label:\"\" \r\n                                },\r\n\r\n                                 {}, { view:\"button\", label: 'login', click:this.doLogin.bind(this)}\r\n                          ],\r\n                            width:500,\r\n                            height:500,\r\n                            gravity:0.3\r\n                        },\r\n                        {}\r\n                       ]\r\n                     }\r\n                 ]};\r\n\r\n     \r\n\r\n     return(\r\n      <div>\r\n        <Webix ui={ui} data={data}/>\r\n      </div>\r\n               \r\n     \r\n      );\r\n     \r\n\r\n  }\r\n}\r\n\r\n//const Portal = ({ data, save }) => (\r\n  \r\n//)\r\nexport default Login;\r\n\r\n","import React, { Component } from 'react';\r\n//import logo from './logo.svg';\r\nimport './App.css';\r\nimport Portal from './containers/portal.js';\r\nimport Login from './containers/Login.js';\r\nclass App extends Component {\r\nconstructor(props) {\r\n    super(props);\r\n    this.state = {\r\n    \tcurrentUser : null,\r\n      baseUrl : \"http://localhost:8080/\",\r\n      role : null\r\n    };\r\n    // Bind handle Login\r\n    this.handleLogin = this.updateLogin.bind(this);\r\n    this.checkIfLoggedIn();\r\n    // Remember to use this.setState({currentUser : something}); \r\n  }\r\n // / <Login  currentUser={this.state.currentUser}/>\r\n checkIfLoggedIn(){\r\n   fetch(this.state.baseUrl+\"Account/GetCurrentUserRole\", {\r\n        method: 'GET', // or 'PUT'\r\n       // body: JSON.stringify({\"Email\":userName,\"Password\":password,\"returnUrl\":null}), // data can be `string` or {object}!\r\n        headers:{\r\n          'Content-Type': 'application/x-www-form-urlencoded'\r\n        },\r\n       credentials: 'same-origin'\r\n\r\n        \r\n\r\n\r\n      }).then(\r\n        res => {\r\n          let json = res.json();\r\n          console.log(res);\r\n          return json;\r\n        }\r\n      )\r\n      .then(response => {\r\n        //console.log('Success:', JSON.stringify(response))\r\n        if(response.success){\r\n          console.log(\"show me \" +  JSON.stringify(response));\r\n        }else{\r\n          let errors = \"\";\r\n          response.error.forEach( error => {\r\n            console.log(error);\r\n            errors += error.description\r\n          }); \r\n          \r\n        }\r\n\r\n      })\r\n      .catch(error => console.error('Error:', error));\r\n\r\n\r\n }\r\n  renderPortal(){\r\n    \r\n  \tif(this.state.currentUser != null){\r\n      console.log(\"render portal\");\r\n  \t\treturn <Portal baseUrl={this.state.baseUrl}/>\r\n  \t}\r\n  }\r\n  renderLogin(){\r\n    \r\n  \tif(this.state.currentUser == null){\r\n      console.log(\"render login\");\r\n  \t\treturn <Login baseUrl={this.state.baseUrl} handleLogin={this.handleLogin} />\r\n  \t}\r\n  }\r\n  updateLogin(user,role){\r\n    this.setState({'currentUser':user,'role':role});\r\n  }\r\n  render() {\r\n   return (\r\n   <div className=\"appContainer\">\r\n      {this.renderLogin()}\r\n      {this.renderPortal()} \r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}